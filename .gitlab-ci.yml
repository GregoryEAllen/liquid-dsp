
build:
  image: debian
  variables:
    DEBIAN_FRONTEND: noninteractive
  script:
    - apt -qq update
    - apt -qq install -y --no-install-recommends build-essential cmake
    - apt -qq install -y --no-install-recommends python3-pip python3-dev pybind11-dev virtualenv
    - virtualenv env/liquid
    - source env/liquid/bin/activate
    - python -m pip install pybind11 numpy matplotlib
    - mkdir build
    - cd build
    - cmake ..
    - make
    - make install
    - ldconfig
    - ./xautotest -v -o autotest.json
    #- make check-link
    #- make doc-check
    #- make bench
  artifacts:
    paths: [build/autotest.json]

.linux:
  image: python:3.12
  # make a docker daemon available for cibuildwheel to use
  services:
    - name: docker:dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    # See https://github.com/docker-library/docker/pull/166
    DOCKER_TLS_CERTDIR: ""
  script:
    - curl -sSL https://get.docker.com/ | sh
    - python -m pip install cibuildwheel==2.19.2
    - cibuildwheel --output-dir wheelhouse
  artifacts:
    paths:
      - wheelhouse/

.macos:
  image: macos-14-xcode-15
  before_script:
    - python3 -m pip install cibuildwheel==2.19.2
  script:
    - python3 -m cibuildwheel --output-dir wheelhouse
  artifacts:
    paths:
      - wheelhouse/
  tags:
    - saas-macos-medium-m1

.windows:
  image: mcr.microsoft.com/windows/servercore:1809
  before_script:
    - choco install python -y --version 3.12.4
    - choco install git.install -y
    - py -m pip install cibuildwheel==2.19.2
  script:
    - py -m cibuildwheel --output-dir wheelhouse --platform windows
  artifacts:
    paths:
      - wheelhouse/
  tags:
    - saas-windows-medium-amd64


# compile and run all example programs, timing how long each takes to run
.examples:
  stage: test
  script:
    - make -j4 examples
    - echo '' > time.txt
    - ls examples/*_example | sed -E "s#(.*)#echo '\1' >> time.txt; { time -p ./\1 ; } 2>> time.txt#g" > run_examples.sh
    - /bin/sh run_examples.sh
  artifacts:
    paths: [run_examples.sh, time.txt]

# compile and run all example programs with valgrind
# TODO: ensure no errors
.examples-memcheck:
  stage: test
  script:
    - make -j4 examples
    # setting --track-origins=yes gives more detail but takes longer than gitlab allows
    - ls examples/*_example | sed -E "s#examples/(.*)#valgrind --tool=memcheck --log-file=examples/\1.log ./examples/\1#g" > run_examples_valgrind.sh
    - /bin/sh run_examples_valgrind.sh
    - tail -n +1 examples/*.log > valgrind.log
  artifacts:
    paths: [run_examples_valgrind.sh, valgrind.log]

# compile and run all autotest programs with valgrind
.autotest-memcheck:
  stage: test
  script:
    - make -j4 xautotest
    - mkdir valgrind
    - ./scripts/valgrind_eval.py -output valgrind -test 881
  artifacts:
    paths: [valgrind/*]

# build from scratch
.coverage:
  stage: test
  script:
    - make distclean
    - ./bootstrap.sh
    - ./configure --enable-coverage
    - make -j4 coverage
    #- curl -Os http://cli.codecov.io/latest/linux/codecov
    #- chmod +x codecov
    #- ./codecov --version
    #- ./codecov upload-process -t $CODECOV_TOKEN --git-service gitlab --slug jgaeddert/liquid-dsp
    - bash <(curl -s https://codecov.io/bash)

  coverage: '/lines: \d+\.\d+%/'
  artifacts:
    paths: [coverage.out]

