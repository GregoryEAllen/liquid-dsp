
build:
  image: debian
  variables:
    DEBIAN_FRONTEND: noninteractive
  script:
    - apt -qq update
    - apt -qq install -y --no-install-recommends build-essential cmake
    - apt -qq install -y --no-install-recommends python3-pip pybind11-dev virtualenv
    - virtualenv env/liquid
    - source env/liquid/bin/activate
    - python -m pip install pybind11 numpy matplotlib
    - mkdir build
    - cd build
    - cmake ..
    - make
    - make install
    - ldconfig
    - ./xautotest -v -o autotest.json
    #- make check-link
    #- make doc-check
    #- make bench
  artifacts:
    paths: [build/autotest.json]

# compile and run all example programs, timing how long each takes to run
.examples:
  stage: test
  script:
    - make -j4 examples
    - echo '' > time.txt
    - ls examples/*_example | sed -E "s#(.*)#echo '\1' >> time.txt; { time -p ./\1 ; } 2>> time.txt#g" > run_examples.sh
    - /bin/sh run_examples.sh
  artifacts:
    paths: [run_examples.sh, time.txt]

# compile and run all example programs with valgrind
# TODO: ensure no errors
.examples-memcheck:
  stage: test
  script:
    - make -j4 examples
    # setting --track-origins=yes gives more detail but takes longer than gitlab allows
    - ls examples/*_example | sed -E "s#examples/(.*)#valgrind --tool=memcheck --log-file=examples/\1.log ./examples/\1#g" > run_examples_valgrind.sh
    - /bin/sh run_examples_valgrind.sh
    - tail -n +1 examples/*.log > valgrind.log
  artifacts:
    paths: [run_examples_valgrind.sh, valgrind.log]

# build from scratch
.coverage:
  stage: test
  script:
    - make distclean
    - ./bootstrap.sh
    - ./configure --enable-coverage
    - make -j4 coverage
    - bash <(curl -s https://codecov.io/bash)
  coverage: '/lines: \d+\.\d+%/'
  artifacts:
    paths: [coverage.out]

