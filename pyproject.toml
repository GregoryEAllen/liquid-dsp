[build-system]
requires = ["scikit-build-core", "pybind11"]
build-backend = "scikit_build_core.build"

[project]
name = "liquid-dsp"
description = "software-defined radio digital signal processing library"
#version = "1.6.0"
dynamic = ["version"] # set automatically from cmake
requires-python = ">= 3.7"
authors = [{name = "Joseph D. Gaeddert", email = "joseph@liquidsdr.org"}]
dependencies = []
readme = "README.md"
license = {file = "LICENSE"}
keywords = ["digital","signal","processing","DSP","software-defined radio","SDR"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering",
    "Programming Language :: C",
    "Programming Language :: C++",
    "Programming Language :: Python :: 3 :: Only",
    "License :: OSI Approved :: MIT License",
]

[project.optional-dependencies]

[project.urls]
Homepage = "https://liquidsdr.org"
Documentation = "https://liquidsdr.org/doc"
Repository = "https://github.com/jgaeddert/liquid-dsp"
Issues = "https://github.com/jgaeddert/liquid-dsp/issues"
Changelog = "https://github.com/jgaeddert/liquid-dsp/blob/master/CHANGELOG.md"

[tool.scikit-build]
cmake.verbose = true
logging.level = "INFO"
#metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
#sdist.include = ["_version.py"]


[tool.scikit-build.metadata.version]
provider = "scikit_build_core.metadata.regex"
input = "include/liquid.h"
regex = '''(?sx)
\#define \s+ LIQUID_VERSION_MAJOR \s+ (?P<major>\d+) .*?
\#define \s+ LIQUID_VERSION_MINOR \s+ (?P<minor>\d+) .*?
\#define \s+ LIQUID_VERSION_PATCH \s+ (?P<patch>\d+) .*?
\#define \s+ LIQUID_VERSION_DEV   \s+ (?P<dev>\d+)   .*?
'''
result = "{major}.{minor}.{patch}dev{dev}"
remove = "dev0"

#[tool.setuptools_scm]  # Section required
#write_to = "_version.py"

#[project.scripts]
#liquid = "liquid:main_cli"

[tool.cibuildwheel]
build = "*"
#test-command = "python {project}/tests/test.py"
#test-skip = "*universal2:arm64"

[tool.cibuildwheel.linux]
before-all = "uname -a"
#repair-wheel-command = "auditwheel repair -w {dest_dir} {wheel}"

[tool.cibuildwheel.macos]
before-all = "uname -a"
#repair-wheel-command = "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"

[tool.cibuildwheel.windows]

[tool.cibuildwheel.pyodide]
